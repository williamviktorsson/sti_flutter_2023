// immutable data, from/toJson, copyWith functions for easily yielding new copies
import 'dart:convert';

import 'package:freezed_annotation/freezed_annotation.dart';

// required: associates our `game_data.dart` with the code generated by Freezed
part 'game_data.freezed.dart';

// optional: Since our Board class is serializable, we must add this line.
part 'game_data.g.dart';

@freezed
class Player with _$Player {
  const factory Player({required String id, required String name}) = _Player;
  factory Player.fromJson(Map<String, dynamic> json) => _$PlayerFromJson(json);
}

@freezed
class Position with _$Position {
  const factory Position({
    required int x,
    required int y,
  }) = _Position;
  factory Position.fromJson(Map<String, dynamic> json) =>
      _$PositionFromJson(json);
}

@freezed
class Board with _$Board {
  const Board._();

  @JsonSerializable(explicitToJson: true) // call toJson on collection objects
  const factory Board({
    required String id,
    required String name,
    required String description,
    required int width,
    required int height,
    required List<Player> players,
    required Map<String, Position> player_positions,
  }) = _Board;

  factory Board.fromJson(Map<String, dynamic> json) => _$BoardFromJson(json);

  String serialize() => json.encode(toJson());
  factory Board.deserialize(String source) =>
      Board.fromJson(json.decode(source));
}

extension CloneHelper on Board {
  Board placePlayer({required int x, required int y, required Player player}) {

    // throw if x or y are out of bounds
    if (x < 0 || x >= width) {
      throw Exception('x is out of bounds');
    }
    if (y < 0 || y >= height) {
      throw Exception('y is out of bounds');
    }

    final newPlayerPositions = Map<String, Position>.from(player_positions);
    newPlayerPositions[player.id] = Position(x: x, y: y);
    return copyWith(player_positions: newPlayerPositions);
  }

  Board displacePlayer({required Player player}) {
    final newPlayerPositions = Map<String, Position>.from(player_positions);
    newPlayerPositions.remove(player.id);
    return copyWith(player_positions: newPlayerPositions);
  }

  Board joinPlayer({required Player player}) {
    final newPlayers = List<Player>.from(players);
    newPlayers.add(player);
    return copyWith(players: newPlayers);
  }

  Board leavePlayer({required Player player}) {
    final newPlayers = List<Player>.from(players);
    newPlayers.remove(player);
    return copyWith(players: newPlayers);
  }
}
