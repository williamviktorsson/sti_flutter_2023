// immutable data, from/toJson, copyWith functions for easily yielding new copies
import 'dart:convert';

import 'package:freezed_annotation/freezed_annotation.dart';

// required: associates our `paint_data.dart` with the code generated by Freezed
part 'paint_data.freezed.dart';

// optional: Since our Paint class is serializable, we must add this line.
part 'paint_data.g.dart';

@freezed
class Participant with _$Participant {
  const factory Participant({
    required String id,
    required String name,
  }) = _Participant;
  factory Participant.fromJson(Map<String, dynamic> json) =>
      _$ParticipantFromJson(json);
}

@freezed
class Pixel with _$Pixel {
  const factory Pixel({
    required int red,
    required int green,
    required int blue,
    required int alpha,
    required Participant placedBy,
  }) = _Pixel;
  factory Pixel.fromJson(Map<String, dynamic> json) => _$PixelFromJson(json);
}

@freezed
class Paint with _$Paint {
  const Paint._();

  @JsonSerializable(explicitToJson: true) // call toJson on collection objects
  const factory Paint({
    required String id,
    required String name,
    required String description,
    required int width,
    required int height,
    required List<Participant> editors,
    required List<List<Pixel>> paintMatrix,
  }) = _Paint;

  factory Paint.fromJson(Map<String, dynamic> json) =>
      _$PaintFromJson(json);

  String serialize() => json.encode(toJson());
  factory Paint.deserialize(String source) =>
      Paint.fromJson(json.decode(source));
}

extension CloneHelper on Paint {
  Paint placePixel(int x, int y, Pixel paint) {
    List<List<Pixel>> tempMatrix = List.of(paintMatrix.map(List.of));
    if (x >= 0 && x < width && y >= 0 && y < height) {
      tempMatrix[y][x] = paint;
    }
    return copyWith(paintMatrix: tempMatrix);
  }
}
